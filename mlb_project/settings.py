"""
Django settings for mlb_project project.

這是 Django 專案的核心設定檔，它就像是整個應用程式的大腦。
在這裡我們定義了專案的所有重要設定：安全性、資料庫、應用程式列表、
中介軟體、模板設定等等。

每個設定都有其特定的用途，就像汽車的儀表板上每個按鈕都有不同功能。
理解這些設定將幫助您更好地掌控整個 Django 專案。

Generated by 'django-admin startproject' using Django 4.2.
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# 建立專案的基礎路徑，這個變數指向專案的根目錄
# 使用 Path 物件讓路徑處理更加簡潔和跨平台相容
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# 快速開發設定 - 這些設定適合開發環境，但不適合正式部署環境
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 安全警告：在正式環境中請妥善保管這個密鑰！
# SECRET_KEY 就像是您家門的鑰匙，Django 用它來加密敏感資料
# 在正式環境中，這個密鑰應該從環境變數或安全的配置文件中讀取
SECRET_KEY = 'django-insecure-mlb-stats-2024-development-key-change-in-production'

# SECURITY WARNING: don't run with debug turned on in production!
# 安全警告：在正式環境中請不要開啟除錯模式！
# DEBUG 模式會顯示詳細的錯誤訊息，這在開發時很有用，但在正式環境中可能暴露敏感資訊
DEBUG = True

# 允許訪問這個 Django 應用程式的主機名稱列表
# 在開發環境中設定為 '*' 表示允許所有主機，但在正式環境中應該設定為特定的域名
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '*']


# Application definition
# 應用程式定義區域
# 這裡列出了所有要在專案中使用的 Django 應用程式
# 想像這就像是告訴 Django：「我的專案需要使用這些功能模組」

INSTALLED_APPS = [
    # Django 內建的核心應用程式
    # 這些是 Django 框架提供的基本功能，就像汽車的基本配備
    'django.contrib.admin',        # 管理後台介面
    'django.contrib.auth',         # 用戶認證系統
    'django.contrib.contenttypes', # 內容類型框架
    'django.contrib.sessions',     # 會話框架
    'django.contrib.messages',     # 訊息框架
    'django.contrib.staticfiles',  # 靜態文件處理
    
    # 我們自己開發的應用程式
    # 這是我們專門為 MLB 統計查詢功能開發的應用程式
    'mlb_app',
]

# 中介軟體設定
# 中介軟體就像是請求和回應之間的過濾器或檢查站
# 每個 HTTP 請求都會依序通過這些中介軟體進行處理
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',     # 安全性中介軟體
    'django.contrib.sessions.middleware.SessionMiddleware', # 會話中介軟體
    'django.middleware.common.CommonMiddleware',         # 通用中介軟體
    'django.middleware.csrf.CsrfViewMiddleware',         # CSRF 防護中介軟體
    'django.contrib.auth.middleware.AuthenticationMiddleware', # 認證中介軟體
    'django.contrib.messages.middleware.MessageMiddleware',     # 訊息中介軟體
    'django.middleware.clickjacking.XFrameOptionsMiddleware',   # 點擊劫持防護
]

# URL 配置的根模組
# 這告訴 Django 在哪裡找到主要的 URL 路由配置
# 就像是網站的地圖，告訴 Django 不同的網址應該對應到哪個功能
ROOT_URLCONF = 'mlb_project.urls'

# 模板系統設定
# 模板就像是網頁的模具，定義了網頁的結構和外觀
# Django 會將數據填入這些模板中，產生最終的 HTML 頁面
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # 額外的模板目錄，如果您想在應用程式外放置共用模板
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,  # 自動搜尋每個應用程式內的 templates 目錄
        'OPTIONS': {
            'context_processors': [
                # 上下文處理器為模板提供額外的變數
                # 這些就像是每個模板都能使用的全域變數
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI 應用程式的路徑
# WSGI 是 Python Web 應用程式和 Web 伺服器之間的標準介面
WSGI_APPLICATION = 'mlb_project.wsgi.application'


# Database
# 資料庫設定
# 這裡定義了 Django 如何連接和使用資料庫
# 我們使用 SQLite 作為開發資料庫，它是一個輕量級的文件型資料庫
# 非常適合開發和測試環境使用

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# 密碼驗證設定
# 這些驗證器確保使用者設定的密碼符合安全標準
# 就像是為用戶帳戶加上額外的安全鎖

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# 國際化設定
# 這些設定控制網站的語言、時區等本地化功能

LANGUAGE_CODE = 'zh-hant'  # 設定為繁體中文

TIME_ZONE = 'Asia/Taipei'  # 設定為台北時區

USE_I18N = True  # 啟用國際化支援

USE_TZ = True    # 啟用時區支援


# Static files (CSS, JavaScript, Images)
# 靜態文件設定
# 靜態文件包括 CSS 樣式表、JavaScript 腳本、圖片等
# 這些文件不會在伺服器端動態生成，而是直接提供給瀏覽器

STATIC_URL = '/static/'  # 靜態文件的 URL 前綴

# 靜態文件的搜尋目錄
# Django 會在這些目錄中尋找靜態文件
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# 在正式環境中，所有靜態文件會被收集到這個目錄
STATIC_ROOT = BASE_DIR / 'staticfiles'


# Media files (User uploaded files)
# 媒體文件設定
# 這些是用戶上傳的文件，例如球員照片
# 與靜態文件不同，媒體文件是動態的，可能會被用戶添加或修改

MEDIA_URL = '/media/'  # 媒體文件的 URL 前綴

MEDIA_ROOT = BASE_DIR / 'media'  # 媒體文件在檔案系統中的儲存位置


# Default primary key field type
# 預設主鍵欄位類型
# 這設定告訴 Django 在建立資料庫表格時，主鍵應該使用什麼類型
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Custom settings for MLB API
# MLB API 的自定義設定
# 這些是我們專門為 MLB 統計功能添加的設定

# MLB Stats API 的基礎 URL
MLB_API_BASE_URL = "https://statsapi.mlb.com/api/v1"

# API 請求的超時時間（秒）
MLB_API_TIMEOUT = 15

# 本地時區設定（用於比賽時間轉換）
MLB_LOCAL_TIMEZONE = 'Asia/Taipei'

# User-Agent 字串，用於 API 請求
MLB_USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"

# 快取設定（可選）
# 為了提高性能，我們可以快取 API 回應
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 分鐘快取
    }
}
